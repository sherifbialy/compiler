package csen1002.tests.task2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task2.NfaToDfa;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task2TestsBatch6 {

	@Test
	public void testNfa1() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#g;k;l#0,g,0;0,g,10;0,g,4;0,g,3;0,g,1;0,g,2;0,g,9;0,k,8;0,k,9;0,k,1;0,k,2;0,l,5;0,l,7;0,l,0;0,l,4;0,l,1;0,l,6;1,g,9;1,g,0;1,g,10;1,g,8;1,g,4;1,g,7;1,k,1;1,k,8;1,k,5;1,k,9;1,k,7;1,k,10;1,k,3;1,l,4;1,l,2;1,l,5;1,l,1;1,l,9;1,l,0;2,g,9;2,g,1;2,g,5;2,g,6;2,g,8;2,g,2;2,k,6;2,k,3;2,k,0;2,k,5;2,k,2;2,k,8;2,l,7;2,l,10;2,l,6;2,l,3;2,l,8;2,l,2;2,l,5;3,g,3;3,g,5;3,g,7;3,g,0;3,g,4;3,k,3;3,k,5;3,k,6;3,k,10;3,k,9;3,k,0;3,k,1;3,l,2;3,l,3;3,l,7;3,l,1;3,l,8;3,l,9;4,g,5;4,g,6;4,g,4;4,g,0;4,g,3;4,k,3;4,k,9;4,k,7;4,k,5;4,k,6;4,l,1;4,l,3;4,l,6;4,l,4;5,g,9;5,g,7;5,g,0;5,g,10;5,g,4;5,g,2;5,g,3;5,k,5;5,k,6;5,k,2;5,k,8;5,k,3;5,l,8;5,l,7;5,l,2;5,l,10;5,l,9;5,l,1;6,g,9;6,g,3;6,g,1;6,g,7;6,g,6;6,k,2;6,k,1;6,k,5;6,k,3;6,k,8;6,k,7;6,k,9;6,l,9;6,l,6;6,l,1;6,l,0;6,l,10;6,l,2;6,l,3;7,g,7;7,g,3;7,g,10;7,g,2;7,g,4;7,k,10;7,k,5;7,k,1;7,k,3;7,k,7;7,k,9;7,l,6;7,l,4;7,l,9;7,l,8;7,l,7;8,g,1;8,g,10;8,g,0;8,g,4;8,g,7;8,g,9;8,k,3;8,k,7;8,k,4;8,k,5;8,k,0;8,k,8;8,l,2;8,l,1;8,l,8;8,l,0;8,l,3;8,l,4;8,l,10;9,g,2;9,g,4;9,g,0;9,g,7;9,g,3;9,k,7;9,k,4;9,k,9;9,k,1;9,l,2;9,l,3;9,l,0;9,l,1;9,l,9;10,g,9;10,g,5;10,g,4;10,g,2;10,g,8;10,g,10;10,k,2;10,k,10;10,k,1;10,k,4;10,k,7;10,l,5;10,l,8;10,l,0;10,l,9;10,l,10#5#1;5;10");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/7/9/10;1/2/7/8/9/10;2/3/5/6/8;5#g;k;l#0/1/2/3/4/5/6/7/8/9/10,g,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,k,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,l,0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/7/9/10,g,0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/7/9/10,k,0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/7/9/10,l,0/1/2/3/4/5/6/7/8/9/10;1/2/7/8/9/10,g,0/1/2/3/4/5/6/7/8/9/10;1/2/7/8/9/10,k,0/1/2/3/4/5/6/7/8/9/10;1/2/7/8/9/10,l,0/1/2/3/4/5/6/7/8/9/10;2/3/5/6/8,g,0/1/2/3/4/5/6/7/8/9/10;2/3/5/6/8,k,0/1/2/3/4/5/6/7/8/9/10;2/3/5/6/8,l,0/1/2/3/4/5/6/7/8/9/10;5,g,0/2/3/4/7/9/10;5,k,2/3/5/6/8;5,l,1/2/7/8/9/10#5#0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/7/9/10;1/2/7/8/9/10;2/3/5/6/8;5", nfaToDfa.toString());
	}

	@Test
	public void testNfa2() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#i;x#0,x,1;1,e,2;1,e,4;2,e,3;3,e,6;4,e,5;5,e,6;6,e,10;7,i,8;8,e,10;9,e,0;9,e,7#9#10");
		assertEquals("-1;0/7/9;1/2/3/4/5/6/10;8/10#i;x#-1,i,-1;-1,x,-1;0/7/9,i,8/10;0/7/9,x,1/2/3/4/5/6/10;1/2/3/4/5/6/10,i,-1;1/2/3/4/5/6/10,x,-1;8/10,i,-1;8/10,x,-1#0/7/9#1/2/3/4/5/6/10;8/10", nfaToDfa.toString());
	}

	@Test
	public void testNfa3() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#a;n;q#0,n,1;1,e,2;1,e,9;2,a,3;3,e,4;3,e,6;4,q,5;5,e,8;6,n,7;7,e,8;8,e,2;8,e,9#0#9");
		assertEquals("-1;0;1/2/9;2/5/8/9;2/7/8/9;3/4/6#a;n;q#-1,a,-1;-1,n,-1;-1,q,-1;0,a,-1;0,n,1/2/9;0,q,-1;1/2/9,a,3/4/6;1/2/9,n,-1;1/2/9,q,-1;2/5/8/9,a,3/4/6;2/5/8/9,n,-1;2/5/8/9,q,-1;2/7/8/9,a,3/4/6;2/7/8/9,n,-1;2/7/8/9,q,-1;3/4/6,a,-1;3/4/6,n,2/7/8/9;3/4/6,q,2/5/8/9#0#1/2/9;2/5/8/9;2/7/8/9", nfaToDfa.toString());
	}

	@Test
	public void testNfa4() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#i;p#0,i,10;0,i,7;0,i,4;0,i,0;0,i,3;0,i,8;0,p,8;0,p,7;0,p,3;0,p,5;0,p,4;0,p,6;0,p,0;1,i,9;1,i,10;1,i,1;1,i,4;1,i,3;1,i,7;1,i,2;1,p,4;1,p,5;1,p,9;1,p,8;1,p,1;1,p,3;1,p,6;2,i,5;2,i,6;2,i,2;2,i,4;2,i,7;2,i,1;2,i,0;2,p,7;2,p,0;2,p,3;2,p,6;2,p,4;2,p,2;3,i,2;3,i,8;3,i,10;3,i,9;3,i,5;3,i,1;3,i,0;3,p,10;3,p,3;3,p,6;3,p,7;3,p,2;3,p,5;4,i,5;4,i,3;4,i,1;4,i,0;4,p,8;4,p,5;4,p,10;4,p,0;5,i,9;5,i,8;5,i,2;5,i,10;5,i,7;5,p,10;5,p,7;5,p,6;5,p,1;6,i,0;6,i,9;6,i,8;6,i,2;6,p,5;6,p,9;6,p,4;6,p,8;6,p,2;6,p,6;6,p,3;7,i,10;7,i,7;7,i,6;7,i,1;7,i,2;7,i,0;7,i,4;7,p,5;7,p,0;7,p,4;7,p,9;7,p,6;7,p,7;7,p,3;8,i,4;8,i,6;8,i,7;8,i,8;8,i,5;8,i,2;8,i,3;8,p,10;8,p,4;8,p,2;8,p,0;9,i,10;9,i,5;9,i,8;9,i,4;9,i,1;9,p,2;9,p,4;9,p,1;9,p,3;10,i,10;10,i,5;10,i,6;10,i,0;10,i,9;10,i,4;10,i,7;10,p,7;10,p,9;10,p,6;10,p,1;10,p,8;10,p,2;10,p,3#9#2;7");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10;1/2/3/4;1/4/5/8/10;9#i;p#0/1/2/3/4/5/6/7/8/9/10,i,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,p,0/1/2/3/4/5/6/7/8/9/10;1/2/3/4,i,0/1/2/3/4/5/6/7/8/9/10;1/2/3/4,p,0/1/2/3/4/5/6/7/8/9/10;1/4/5/8/10,i,0/1/2/3/4/5/6/7/8/9/10;1/4/5/8/10,p,0/1/2/3/4/5/6/7/8/9/10;9,i,1/4/5/8/10;9,p,1/2/3/4#9#0/1/2/3/4/5/6/7/8/9/10;1/2/3/4", nfaToDfa.toString());
	}

	@Test
	public void testNfa5() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11;12#a;o#0,a,1;0,a,4;0,a,9;0,a,10;0,a,3;0,a,0;0,a,11;0,o,2;0,o,0;0,o,12;0,o,9;0,o,7;0,o,11;0,o,5;1,a,1;1,a,6;1,a,0;1,a,4;1,a,8;1,a,2;1,a,12;1,o,6;1,o,2;1,o,5;1,o,10;1,o,9;1,o,0;2,a,4;2,a,9;2,a,8;2,a,3;2,a,1;2,a,6;2,o,6;2,o,7;2,o,4;2,o,0;2,o,5;3,a,6;3,a,5;3,a,1;3,a,4;3,a,7;3,o,5;3,o,1;3,o,7;3,o,6;3,o,4;3,o,12;3,o,3;4,a,8;4,a,2;4,a,3;4,a,11;4,a,5;4,a,6;4,a,9;4,o,12;4,o,10;4,o,6;4,o,8;4,o,2;4,o,5;4,o,4;5,a,1;5,a,2;5,a,10;5,a,12;5,a,0;5,a,5;5,a,11;5,o,9;5,o,1;5,o,2;5,o,7;5,o,12;5,o,0;6,a,3;6,a,2;6,a,8;6,a,4;6,a,9;6,a,11;6,o,9;6,o,2;6,o,6;6,o,5;6,o,8;7,a,7;7,a,11;7,a,5;7,a,1;7,a,8;7,a,2;7,o,3;7,o,1;7,o,12;7,o,2;7,o,11;7,o,4;7,o,6;8,a,10;8,a,7;8,a,3;8,a,2;8,a,6;8,a,5;8,o,5;8,o,6;8,o,1;8,o,7;8,o,9;8,o,2;8,o,4;9,a,12;9,a,6;9,a,4;9,a,10;9,a,9;9,o,10;9,o,2;9,o,6;9,o,9;9,o,0;10,a,2;10,a,0;10,a,9;10,a,8;10,o,6;10,o,0;10,o,4;10,o,9;10,o,8;10,o,12;10,o,7;11,a,2;11,a,4;11,a,3;11,a,12;11,a,9;11,a,0;11,o,1;11,o,11;11,o,12;11,o,6;11,o,2;11,o,4;11,o,5;12,a,7;12,a,10;12,a,3;12,a,6;12,o,8;12,o,4;12,o,6;12,o,3;12,o,7;12,o,9#4#2;3;7");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/8/9/10/12;2/3/5/6/8/9/11;2/4/5/6/8/10/12;4#a;o#0/1/2/3/4/5/6/7/8/9/10/11/12,a,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/8/9/10/11/12,o,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/8/9/10/12,a,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/8/9/10/12,o,0/1/2/3/4/5/6/7/8/9/10/11/12;2/3/5/6/8/9/11,a,0/1/2/3/4/5/6/7/8/9/10/11/12;2/3/5/6/8/9/11,o,0/1/2/3/4/5/6/7/8/9/10/11/12;2/4/5/6/8/10/12,a,0/1/2/3/4/5/6/7/8/9/10/11/12;2/4/5/6/8/10/12,o,0/1/2/3/4/5/6/7/8/9/10/12;4,a,2/3/5/6/8/9/11;4,o,2/4/5/6/8/10/12#4#0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/8/9/10/12;2/3/5/6/8/9/11;2/4/5/6/8/10/12", nfaToDfa.toString());
	}

	@Test
	public void testNfa6() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#b;f;i;q;y#0,y,1;1,e,9;2,q,3;3,e,4;3,e,7;4,i,5;5,b,6;6,e,4;6,e,7;7,e,9;8,e,0;8,e,2;9,f,10#8#10");
		assertEquals("-1;0/2/8;1/9;3/4/7/9;4/6/7/9;5;10#b;f;i;q;y#-1,b,-1;-1,f,-1;-1,i,-1;-1,q,-1;-1,y,-1;0/2/8,b,-1;0/2/8,f,-1;0/2/8,i,-1;0/2/8,q,3/4/7/9;0/2/8,y,1/9;1/9,b,-1;1/9,f,10;1/9,i,-1;1/9,q,-1;1/9,y,-1;3/4/7/9,b,-1;3/4/7/9,f,10;3/4/7/9,i,5;3/4/7/9,q,-1;3/4/7/9,y,-1;4/6/7/9,b,-1;4/6/7/9,f,10;4/6/7/9,i,5;4/6/7/9,q,-1;4/6/7/9,y,-1;5,b,4/6/7/9;5,f,-1;5,i,-1;5,q,-1;5,y,-1;10,b,-1;10,f,-1;10,i,-1;10,q,-1;10,y,-1#0/2/8#10", nfaToDfa.toString());
	}

	@Test
	public void testNfa7() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#h;r;s;x#0,r,1;1,x,2;2,s,3;3,e,7;4,h,5;5,e,7;6,e,0;6,e,4;7,x,8;8,e,6;8,e,10;9,e,6;9,e,10#9#10");
		assertEquals("-1;0/4/6/8/10;0/4/6/9/10;1;2;3/7;5/7#h;r;s;x#-1,h,-1;-1,r,-1;-1,s,-1;-1,x,-1;0/4/6/8/10,h,5/7;0/4/6/8/10,r,1;0/4/6/8/10,s,-1;0/4/6/8/10,x,-1;0/4/6/9/10,h,5/7;0/4/6/9/10,r,1;0/4/6/9/10,s,-1;0/4/6/9/10,x,-1;1,h,-1;1,r,-1;1,s,-1;1,x,2;2,h,-1;2,r,-1;2,s,3/7;2,x,-1;3/7,h,-1;3/7,r,-1;3/7,s,-1;3/7,x,0/4/6/8/10;5/7,h,-1;5/7,r,-1;5/7,s,-1;5/7,x,0/4/6/8/10#0/4/6/9/10#0/4/6/8/10;0/4/6/9/10", nfaToDfa.toString());
	}

	@Test
	public void testNfa8() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#i;r#0,i,1;0,i,0;0,i,6;0,i,7;0,i,8;0,i,5;0,r,5;0,r,0;0,r,2;0,r,8;0,r,7;1,i,8;1,i,4;1,i,7;1,i,1;1,i,5;1,r,7;1,r,0;1,r,5;1,r,8;1,r,4;1,r,3;2,i,0;2,i,1;2,i,2;2,i,5;2,r,0;2,r,3;2,r,6;2,r,4;2,r,5;2,r,7;3,i,0;3,i,5;3,i,8;3,i,2;3,r,7;3,r,6;3,r,1;3,r,8;3,r,2;4,i,3;4,i,7;4,i,1;4,i,8;4,i,0;4,i,6;4,r,5;4,r,8;4,r,6;4,r,3;4,r,4;4,r,7;4,r,1;5,i,0;5,i,1;5,i,7;5,i,2;5,i,8;5,r,8;5,r,3;5,r,2;5,r,4;5,r,1;6,i,4;6,i,5;6,i,6;6,i,3;6,i,8;6,i,7;6,r,5;6,r,0;6,r,6;6,r,4;6,r,2;6,r,8;7,i,6;7,i,1;7,i,2;7,i,3;7,i,7;7,i,5;7,i,8;7,r,3;7,r,7;7,r,5;7,r,4;8,i,3;8,i,8;8,i,6;8,i,1;8,r,6;8,r,8;8,r,2;8,r,1;8,r,4#5#0;6");
		assertEquals("0/1/2/3/4/5/6/7/8;0/1/2/7/8;1/2/3/4/8;5#i;r#0/1/2/3/4/5/6/7/8,i,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,r,0/1/2/3/4/5/6/7/8;0/1/2/7/8,i,0/1/2/3/4/5/6/7/8;0/1/2/7/8,r,0/1/2/3/4/5/6/7/8;1/2/3/4/8,i,0/1/2/3/4/5/6/7/8;1/2/3/4/8,r,0/1/2/3/4/5/6/7/8;5,i,0/1/2/7/8;5,r,1/2/3/4/8#5#0/1/2/3/4/5/6/7/8;0/1/2/7/8", nfaToDfa.toString());
	}

	@Test
	public void testNfa9() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#a;n;r;t;z#0,t,1;1,e,2;1,e,7;2,n,3;3,a,4;4,e,9;5,r,6;6,e,5;6,e,8;7,e,5;7,e,8;8,e,9;9,z,10#0#10");
		assertEquals("-1;0;1/2/5/7/8/9;3;4/9;5/6/8/9;10#a;n;r;t;z#-1,a,-1;-1,n,-1;-1,r,-1;-1,t,-1;-1,z,-1;0,a,-1;0,n,-1;0,r,-1;0,t,1/2/5/7/8/9;0,z,-1;1/2/5/7/8/9,a,-1;1/2/5/7/8/9,n,3;1/2/5/7/8/9,r,5/6/8/9;1/2/5/7/8/9,t,-1;1/2/5/7/8/9,z,10;3,a,4/9;3,n,-1;3,r,-1;3,t,-1;3,z,-1;4/9,a,-1;4/9,n,-1;4/9,r,-1;4/9,t,-1;4/9,z,10;5/6/8/9,a,-1;5/6/8/9,n,-1;5/6/8/9,r,5/6/8/9;5/6/8/9,t,-1;5/6/8/9,z,10;10,a,-1;10,n,-1;10,r,-1;10,t,-1;10,z,-1#0#10", nfaToDfa.toString());
	}

	@Test
	public void testNfa10() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#m;u#0,m,1;0,m,0;0,m,3;0,m,5;0,m,10;0,m,9;0,u,8;0,u,3;0,u,5;0,u,9;1,m,4;1,m,1;1,m,2;1,m,3;1,m,5;1,m,9;1,u,5;1,u,8;1,u,4;1,u,0;1,u,1;1,u,3;1,u,6;2,m,6;2,m,5;2,m,1;2,m,10;2,m,2;2,m,3;2,m,8;2,u,5;2,u,3;2,u,4;2,u,11;2,u,7;3,m,2;3,m,4;3,m,1;3,m,5;3,u,5;3,u,2;3,u,0;3,u,6;4,m,1;4,m,10;4,m,8;4,m,5;4,m,7;4,m,0;4,u,2;4,u,8;4,u,5;4,u,3;4,u,7;4,u,6;4,u,10;5,m,1;5,m,0;5,m,5;5,m,2;5,u,6;5,u,2;5,u,11;5,u,4;5,u,9;5,u,0;6,m,8;6,m,2;6,m,1;6,m,6;6,m,5;6,u,9;6,u,3;6,u,10;6,u,7;6,u,5;7,m,0;7,m,9;7,m,2;7,m,3;7,m,7;7,m,4;7,m,11;7,u,4;7,u,8;7,u,2;7,u,11;7,u,0;8,m,2;8,m,8;8,m,7;8,m,5;8,m,4;8,m,9;8,m,3;8,u,9;8,u,1;8,u,0;8,u,2;8,u,5;9,m,11;9,m,8;9,m,4;9,m,0;9,m,3;9,u,6;9,u,3;9,u,11;9,u,1;9,u,5;9,u,0;9,u,10;10,m,0;10,m,10;10,m,2;10,m,1;10,u,1;10,u,10;10,u,3;10,u,7;10,u,6;10,u,9;10,u,0;11,m,1;11,m,7;11,m,0;11,m,4;11,m,6;11,m,5;11,m,3;11,u,6;11,u,2;11,u,1;11,u,11;11,u,5#7#2;3;6;10");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10/11;0/2/3/4/7/9/11;0/2/4/8/11;7#m;u#0/1/2/3/4/5/6/7/8/9/10,m,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/8/9/10,u,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/8/9/10/11,m,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/8/9/10/11,u,0/1/2/3/4/5/6/7/8/9/10/11;0/2/3/4/7/9/11,m,0/1/2/3/4/5/6/7/8/9/10/11;0/2/3/4/7/9/11,u,0/1/2/3/4/5/6/7/8/9/10/11;0/2/4/8/11,m,0/1/2/3/4/5/6/7/8/9/10;0/2/4/8/11,u,0/1/2/3/4/5/6/7/8/9/10/11;7,m,0/2/3/4/7/9/11;7,u,0/2/4/8/11#7#0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10/11;0/2/3/4/7/9/11;0/2/4/8/11", nfaToDfa.toString());
	}

}