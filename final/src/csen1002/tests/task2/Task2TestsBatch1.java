package csen1002.tests.task2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task2.NfaToDfa;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task2TestsBatch1 {

	@Test
	public void testNfa1() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#f;x#0,f,1;1,e,7;2,x,3;3,x,4;4,e,5;5,e,7;6,e,0;6,e,2;7,e,6;7,e,9;8,e,6;8,e,9#8#9");
		assertEquals("-1;0/1/2/6/7/9;0/2/4/5/6/7/9;0/2/6/8/9;3#f;x#-1,f,-1;-1,x,-1;0/1/2/6/7/9,f,0/1/2/6/7/9;0/1/2/6/7/9,x,3;0/2/4/5/6/7/9,f,0/1/2/6/7/9;0/2/4/5/6/7/9,x,3;0/2/6/8/9,f,0/1/2/6/7/9;0/2/6/8/9,x,3;3,f,-1;3,x,0/2/4/5/6/7/9#0/2/6/8/9#0/1/2/6/7/9;0/2/4/5/6/7/9;0/2/6/8/9", nfaToDfa.toString());
	}

	@Test
	public void testNfa2() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#b;h;o#0,b,1;1,e,11;2,o,3;3,e,7;4,h,5;5,e,7;6,e,2;6,e,4;7,e,6;7,e,9;8,e,6;8,e,9;9,e,11;10,e,0;10,e,8#10#11");
		assertEquals("-1;0/2/4/6/8/9/10/11;1/11;2/3/4/6/7/9/11;2/4/5/6/7/9/11#b;h;o#-1,b,-1;-1,h,-1;-1,o,-1;0/2/4/6/8/9/10/11,b,1/11;0/2/4/6/8/9/10/11,h,2/4/5/6/7/9/11;0/2/4/6/8/9/10/11,o,2/3/4/6/7/9/11;1/11,b,-1;1/11,h,-1;1/11,o,-1;2/3/4/6/7/9/11,b,-1;2/3/4/6/7/9/11,h,2/4/5/6/7/9/11;2/3/4/6/7/9/11,o,2/3/4/6/7/9/11;2/4/5/6/7/9/11,b,-1;2/4/5/6/7/9/11,h,2/4/5/6/7/9/11;2/4/5/6/7/9/11,o,2/3/4/6/7/9/11#0/2/4/6/8/9/10/11#0/2/4/6/8/9/10/11;1/11;2/3/4/6/7/9/11;2/4/5/6/7/9/11", nfaToDfa.toString());
	}

	@Test
	public void testNfa3() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#g;m#0,g,3;0,g,9;0,g,6;0,g,8;0,m,8;0,m,5;0,m,6;0,m,4;0,m,9;0,m,0;1,g,0;1,g,8;1,g,4;1,g,2;1,g,6;1,m,2;1,m,3;1,m,8;1,m,9;1,m,0;2,g,4;2,g,0;2,g,2;2,g,8;2,m,9;2,m,8;2,m,1;2,m,4;2,m,2;2,m,5;2,m,3;3,g,9;3,g,5;3,g,0;3,g,1;3,g,7;3,g,8;3,m,1;3,m,2;3,m,8;3,m,3;3,m,7;3,m,0;4,g,9;4,g,5;4,g,0;4,g,1;4,g,6;4,g,2;4,m,2;4,m,6;4,m,8;4,m,4;4,m,9;4,m,1;5,g,2;5,g,4;5,g,3;5,g,1;5,g,9;5,g,0;5,g,5;5,m,8;5,m,4;5,m,3;5,m,6;5,m,1;6,g,0;6,g,2;6,g,4;6,g,9;6,m,8;6,m,5;6,m,9;6,m,2;6,m,4;6,m,0;7,g,9;7,g,1;7,g,0;7,g,4;7,g,5;7,m,7;7,m,4;7,m,2;7,m,3;7,m,0;7,m,9;8,g,5;8,g,3;8,g,9;8,g,4;8,g,6;8,g,0;8,g,2;8,m,3;8,m,2;8,m,7;8,m,6;8,m,1;9,g,2;9,g,6;9,g,5;9,g,3;9,g,4;9,g,7;9,m,6;9,m,7;9,m,3;9,m,2;9,m,8;9,m,4#9#3;4;5");
		assertEquals("0/1/2/3/4/5/6/7/8/9;2/3/4/5/6/7;2/3/4/6/7/8;9#g;m#0/1/2/3/4/5/6/7/8/9,g,0/1/2/3/4/5/6/7/8/9;0/1/2/3/4/5/6/7/8/9,m,0/1/2/3/4/5/6/7/8/9;2/3/4/5/6/7,g,0/1/2/3/4/5/6/7/8/9;2/3/4/5/6/7,m,0/1/2/3/4/5/6/7/8/9;2/3/4/6/7/8,g,0/1/2/3/4/5/6/7/8/9;2/3/4/6/7/8,m,0/1/2/3/4/5/6/7/8/9;9,g,2/3/4/5/6/7;9,m,2/3/4/6/7/8#9#0/1/2/3/4/5/6/7/8/9;2/3/4/5/6/7;2/3/4/6/7/8", nfaToDfa.toString());
	}

	@Test
	public void testNfa4() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11;12#f;i;n#0,n,1;1,e,10;1,e,12;2,f,3;3,e,11;4,f,5;5,e,9;6,i,7;7,e,9;8,e,4;8,e,6;9,e,11;10,e,2;10,e,8;11,e,10;11,e,12#0#12");
		assertEquals("-1;0;1/2/4/6/8/10/12;2/3/4/5/6/8/9/10/11/12;2/4/6/7/8/9/10/11/12#f;i;n#-1,f,-1;-1,i,-1;-1,n,-1;0,f,-1;0,i,-1;0,n,1/2/4/6/8/10/12;1/2/4/6/8/10/12,f,2/3/4/5/6/8/9/10/11/12;1/2/4/6/8/10/12,i,2/4/6/7/8/9/10/11/12;1/2/4/6/8/10/12,n,-1;2/3/4/5/6/8/9/10/11/12,f,2/3/4/5/6/8/9/10/11/12;2/3/4/5/6/8/9/10/11/12,i,2/4/6/7/8/9/10/11/12;2/3/4/5/6/8/9/10/11/12,n,-1;2/4/6/7/8/9/10/11/12,f,2/3/4/5/6/8/9/10/11/12;2/4/6/7/8/9/10/11/12,i,2/4/6/7/8/9/10/11/12;2/4/6/7/8/9/10/11/12,n,-1#0#1/2/4/6/8/10/12;2/3/4/5/6/8/9/10/11/12;2/4/6/7/8/9/10/11/12", nfaToDfa.toString());
	}

	@Test
	public void testNfa5() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#b;i;j#0,b,3;0,b,1;0,b,4;0,b,8;0,i,3;0,i,8;0,i,2;0,i,7;0,j,1;0,j,0;0,j,5;0,j,2;0,j,4;1,b,2;1,b,8;1,b,5;1,b,3;1,b,1;1,b,6;1,b,4;1,i,1;1,i,0;1,i,7;1,i,2;1,j,3;1,j,4;1,j,2;1,j,7;2,b,5;2,b,6;2,b,7;2,b,1;2,b,2;2,i,7;2,i,8;2,i,4;2,i,3;2,j,6;2,j,3;2,j,8;2,j,7;2,j,0;2,j,1;2,j,4;3,b,4;3,b,0;3,b,2;3,b,6;3,b,8;3,b,7;3,b,3;3,i,6;3,i,4;3,i,2;3,i,7;3,i,8;3,j,0;3,j,7;3,j,5;3,j,8;3,j,4;4,b,3;4,b,8;4,b,4;4,b,7;4,i,0;4,i,1;4,i,6;4,i,4;4,i,7;4,i,2;4,j,4;4,j,1;4,j,3;4,j,8;4,j,2;5,b,5;5,b,2;5,b,0;5,b,8;5,b,1;5,i,7;5,i,3;5,i,1;5,i,8;5,i,0;5,i,4;5,i,6;5,j,1;5,j,7;5,j,0;5,j,3;5,j,8;5,j,4;6,b,1;6,b,4;6,b,8;6,b,5;6,b,0;6,b,6;6,i,6;6,i,3;6,i,1;6,i,2;6,i,0;6,i,5;6,j,3;6,j,8;6,j,5;6,j,4;6,j,0;6,j,1;7,b,7;7,b,6;7,b,1;7,b,0;7,i,2;7,i,5;7,i,0;7,i,8;7,j,2;7,j,8;7,j,1;7,j,6;7,j,3;8,b,6;8,b,7;8,b,5;8,b,2;8,b,0;8,b,3;8,b,8;8,i,8;8,i,0;8,i,1;8,i,6;8,i,3;8,j,5;8,j,0;8,j,8;8,j,2;8,j,1;8,j,3#2#1;2;4;6;7");
		assertEquals("0/1/2/3/4/5/6/7/8;0/1/3/4/6/7/8;1/2/5/6/7;2;3/4/7/8#b;i;j#0/1/2/3/4/5/6/7/8,b,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,i,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,j,0/1/2/3/4/5/6/7/8;0/1/3/4/6/7/8,b,0/1/2/3/4/5/6/7/8;0/1/3/4/6/7/8,i,0/1/2/3/4/5/6/7/8;0/1/3/4/6/7/8,j,0/1/2/3/4/5/6/7/8;1/2/5/6/7,b,0/1/2/3/4/5/6/7/8;1/2/5/6/7,i,0/1/2/3/4/5/6/7/8;1/2/5/6/7,j,0/1/2/3/4/5/6/7/8;2,b,1/2/5/6/7;2,i,3/4/7/8;2,j,0/1/3/4/6/7/8;3/4/7/8,b,0/1/2/3/4/5/6/7/8;3/4/7/8,i,0/1/2/3/4/5/6/7/8;3/4/7/8,j,0/1/2/3/4/5/6/7/8#2#0/1/2/3/4/5/6/7/8;0/1/3/4/6/7/8;1/2/5/6/7;2;3/4/7/8", nfaToDfa.toString());
	}

	@Test
	public void testNfa6() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#h;t;v;y#0,v,1;1,t,2;2,t,3;3,h,4;4,e,5;4,e,7;5,y,6;6,e,9;7,y,8;8,e,9#0#9");
		assertEquals("-1;0;1;2;3;4/5/7;6/8/9#h;t;v;y#-1,h,-1;-1,t,-1;-1,v,-1;-1,y,-1;0,h,-1;0,t,-1;0,v,1;0,y,-1;1,h,-1;1,t,2;1,v,-1;1,y,-1;2,h,-1;2,t,3;2,v,-1;2,y,-1;3,h,4/5/7;3,t,-1;3,v,-1;3,y,-1;4/5/7,h,-1;4/5/7,t,-1;4/5/7,v,-1;4/5/7,y,6/8/9;6/8/9,h,-1;6/8/9,t,-1;6/8/9,v,-1;6/8/9,y,-1#0#6/8/9", nfaToDfa.toString());
	}

	@Test
	public void testNfa7() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#b;f;n;q;s#0,s,1;1,n,2;2,f,3;3,q,4;4,e,8;5,b,6;6,e,8;7,e,0;7,e,5#7#8");
		assertEquals("-1;0/5/7;1;2;3;4/8;6/8#b;f;n;q;s#-1,b,-1;-1,f,-1;-1,n,-1;-1,q,-1;-1,s,-1;0/5/7,b,6/8;0/5/7,f,-1;0/5/7,n,-1;0/5/7,q,-1;0/5/7,s,1;1,b,-1;1,f,-1;1,n,2;1,q,-1;1,s,-1;2,b,-1;2,f,3;2,n,-1;2,q,-1;2,s,-1;3,b,-1;3,f,-1;3,n,-1;3,q,4/8;3,s,-1;4/8,b,-1;4/8,f,-1;4/8,n,-1;4/8,q,-1;4/8,s,-1;6/8,b,-1;6/8,f,-1;6/8,n,-1;6/8,q,-1;6/8,s,-1#0/5/7#4/8;6/8", nfaToDfa.toString());
	}

	@Test
	public void testNfa8() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#u;y#0,u,7;0,u,1;0,u,5;0,u,2;0,u,6;0,y,7;0,y,6;0,y,0;0,y,4;0,y,5;0,y,2;1,u,6;1,u,1;1,u,7;1,u,4;1,u,3;1,u,0;1,u,2;1,y,4;1,y,1;1,y,7;1,y,2;1,y,3;1,y,6;1,y,5;2,u,7;2,u,6;2,u,3;2,u,1;2,u,5;2,u,4;2,u,2;2,y,0;2,y,3;2,y,5;2,y,4;2,y,7;3,u,0;3,u,7;3,u,2;3,u,6;3,y,3;3,y,0;3,y,1;3,y,5;3,y,2;3,y,4;4,u,1;4,u,0;4,u,6;4,u,3;4,u,7;4,u,5;4,u,4;4,y,3;4,y,0;4,y,4;4,y,1;4,y,5;4,y,2;5,u,2;5,u,0;5,u,1;5,u,3;5,u,7;5,u,6;5,u,4;5,y,2;5,y,4;5,y,5;5,y,3;5,y,7;5,y,0;5,y,6;6,u,4;6,u,5;6,u,7;6,u,1;6,u,3;6,y,1;6,y,2;6,y,3;6,y,4;7,u,4;7,u,7;7,u,5;7,u,1;7,u,0;7,u,3;7,u,6;7,y,7;7,y,1;7,y,0;7,y,3;7,y,4;7,y,6#3#0;1;3");
		assertEquals("0/1/2/3/4/5;0/1/2/3/4/5/6/7;0/2/6/7;3#u;y#0/1/2/3/4/5,u,0/1/2/3/4/5/6/7;0/1/2/3/4/5,y,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,u,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,y,0/1/2/3/4/5/6/7;0/2/6/7,u,0/1/2/3/4/5/6/7;0/2/6/7,y,0/1/2/3/4/5/6/7;3,u,0/2/6/7;3,y,0/1/2/3/4/5#3#0/1/2/3/4/5;0/1/2/3/4/5/6/7;0/2/6/7;3", nfaToDfa.toString());
	}

	@Test
	public void testNfa9() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#j;u;z#0,j,0;0,j,1;0,j,5;0,j,2;0,j,8;0,j,7;0,u,8;0,u,2;0,u,5;0,u,7;0,z,3;0,z,8;0,z,6;0,z,4;0,z,5;0,z,2;1,j,7;1,j,6;1,j,1;1,j,0;1,j,4;1,j,5;1,j,2;1,u,7;1,u,1;1,u,3;1,u,2;1,z,8;1,z,7;1,z,1;1,z,6;1,z,2;1,z,5;1,z,4;2,j,7;2,j,3;2,j,2;2,j,4;2,j,1;2,u,3;2,u,4;2,u,8;2,u,7;2,u,2;2,z,2;2,z,1;2,z,8;2,z,5;2,z,0;2,z,3;2,z,4;3,j,7;3,j,2;3,j,4;3,j,5;3,j,8;3,u,6;3,u,4;3,u,0;3,u,7;3,u,1;3,u,8;3,u,5;3,z,1;3,z,0;3,z,2;3,z,6;3,z,3;3,z,5;3,z,7;4,j,6;4,j,5;4,j,8;4,j,7;4,j,4;4,u,0;4,u,3;4,u,1;4,u,5;4,u,2;4,z,8;4,z,2;4,z,4;4,z,6;4,z,3;4,z,1;4,z,0;5,j,1;5,j,7;5,j,8;5,j,2;5,u,6;5,u,3;5,u,2;5,u,4;5,u,7;5,u,1;5,u,8;5,z,3;5,z,1;5,z,6;5,z,0;5,z,8;5,z,4;6,j,7;6,j,3;6,j,8;6,j,0;6,u,2;6,u,6;6,u,5;6,u,1;6,u,8;6,u,7;6,z,3;6,z,8;6,z,6;6,z,7;6,z,1;6,z,4;6,z,0;7,j,4;7,j,7;7,j,6;7,j,1;7,j,2;7,j,3;7,j,8;7,u,0;7,u,6;7,u,7;7,u,5;7,u,4;7,u,8;7,z,1;7,z,0;7,z,7;7,z,3;8,j,0;8,j,6;8,j,5;8,j,1;8,u,5;8,u,0;8,u,7;8,u,4;8,u,8;8,u,2;8,z,6;8,z,1;8,z,8;8,z,2#8#3;4");
		assertEquals("0/1/2/3/4/5/6/7/8;0/1/5/6;0/2/4/5/7/8;1/2/3/4/5/6/7/8;1/2/6/8;8#j;u;z#0/1/2/3/4/5/6/7/8,j,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,u,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,z,0/1/2/3/4/5/6/7/8;0/1/5/6,j,0/1/2/3/4/5/6/7/8;0/1/5/6,u,1/2/3/4/5/6/7/8;0/1/5/6,z,0/1/2/3/4/5/6/7/8;0/2/4/5/7/8,j,0/1/2/3/4/5/6/7/8;0/2/4/5/7/8,u,0/1/2/3/4/5/6/7/8;0/2/4/5/7/8,z,0/1/2/3/4/5/6/7/8;1/2/3/4/5/6/7/8,j,0/1/2/3/4/5/6/7/8;1/2/3/4/5/6/7/8,u,0/1/2/3/4/5/6/7/8;1/2/3/4/5/6/7/8,z,0/1/2/3/4/5/6/7/8;1/2/6/8,j,0/1/2/3/4/5/6/7/8;1/2/6/8,u,0/1/2/3/4/5/6/7/8;1/2/6/8,z,0/1/2/3/4/5/6/7/8;8,j,0/1/5/6;8,u,0/2/4/5/7/8;8,z,1/2/6/8#8#0/1/2/3/4/5/6/7/8;0/2/4/5/7/8;1/2/3/4/5/6/7/8", nfaToDfa.toString());
	}

	@Test
	public void testNfa10() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#c;y;z#0,c,3;0,c,6;0,c,1;0,c,4;0,c,5;0,c,0;0,c,7;0,y,6;0,y,4;0,y,7;0,y,1;0,y,5;0,y,3;0,y,2;0,z,6;0,z,7;0,z,4;0,z,3;1,c,7;1,c,3;1,c,5;1,c,1;1,y,1;1,y,0;1,y,5;1,y,7;1,y,4;1,z,1;1,z,4;1,z,6;1,z,0;1,z,3;2,c,5;2,c,7;2,c,3;2,c,6;2,c,1;2,y,4;2,y,5;2,y,7;2,y,1;2,y,3;2,z,0;2,z,3;2,z,6;2,z,2;2,z,4;3,c,1;3,c,6;3,c,5;3,c,4;3,c,2;3,y,2;3,y,3;3,y,4;3,y,1;3,y,7;3,y,6;3,y,0;3,z,7;3,z,1;3,z,2;3,z,0;3,z,6;3,z,3;3,z,4;4,c,4;4,c,5;4,c,1;4,c,7;4,c,3;4,y,5;4,y,6;4,y,7;4,y,0;4,y,3;4,y,1;4,z,7;4,z,0;4,z,6;4,z,5;5,c,2;5,c,3;5,c,4;5,c,0;5,c,1;5,c,7;5,c,6;5,y,2;5,y,5;5,y,1;5,y,3;5,y,4;5,z,3;5,z,4;5,z,6;5,z,1;5,z,0;5,z,7;5,z,5;6,c,2;6,c,7;6,c,6;6,c,3;6,c,5;6,c,0;6,y,2;6,y,5;6,y,3;6,y,0;6,z,1;6,z,7;6,z,2;6,z,6;7,c,1;7,c,0;7,c,2;7,c,5;7,c,3;7,c,7;7,c,6;7,y,4;7,y,2;7,y,0;7,y,7;7,y,5;7,y,3;7,z,4;7,z,3;7,z,1;7,z,6;7,z,0;7,z,7#7#0;3");
		assertEquals("0/1/2/3/4/5/6/7;0/1/2/3/5/6/7;0/1/3/4/6/7;0/2/3/4/5/7;7#c;y;z#0/1/2/3/4/5/6/7,c,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,y,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,z,0/1/2/3/4/5/6/7;0/1/2/3/5/6/7,c,0/1/2/3/4/5/6/7;0/1/2/3/5/6/7,y,0/1/2/3/4/5/6/7;0/1/2/3/5/6/7,z,0/1/2/3/4/5/6/7;0/1/3/4/6/7,c,0/1/2/3/4/5/6/7;0/1/3/4/6/7,y,0/1/2/3/4/5/6/7;0/1/3/4/6/7,z,0/1/2/3/4/5/6/7;0/2/3/4/5/7,c,0/1/2/3/4/5/6/7;0/2/3/4/5/7,y,0/1/2/3/4/5/6/7;0/2/3/4/5/7,z,0/1/2/3/4/5/6/7;7,c,0/1/2/3/5/6/7;7,y,0/2/3/4/5/7;7,z,0/1/3/4/6/7#7#0/1/2/3/4/5/6/7;0/1/2/3/5/6/7;0/1/3/4/6/7;0/2/3/4/5/7", nfaToDfa.toString());
	}

}